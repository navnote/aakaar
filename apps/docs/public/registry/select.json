{
  "name": "select",
  "dependencies": [
    "@radix-ui/react-select",
    "@tabler/icons-react"
  ],
  "files": [
    {
      "name": "select.tsx",
      "content": "import * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { IconCheck, IconChevronDown, IconChevronUp } from \"@tabler/icons-react\";\nimport * as React from \"react\";\nimport {\n\talignment,\n\tcn,\n\tcolors,\n\tdimensions,\n\tinteractivity,\n\tmeasurements,\n\tpadding,\n\tpaddingX,\n\tpaddingY,\n\tpositioning,\n\tshadows,\n\tshape,\n\ttypography,\n\tutilities,\n} from \"../../core/core\";\n\nconst selectStyles = {\n\ttrigger: cn(\n\t\tshape.roundedWithBorder,\n\t\tdimensions.fullWidth,\n\t\tcolors.surface,\n\t\talignment.spaceBetween,\n\t\tpadding.small,\n\t\ttypography.size.small,\n\t\tinteractivity.states.clickable,\n\t\tinteractivity.states.disabled,\n\t\t\"h-xl [&>span]:line-clamp-1\",\n\t),\n\tcontent: cn(\n\t\tshape.roundedWithBorder,\n\t\tcolors.surface,\n\t\tpositioning.relative,\n\t\tutilities.zIndex.modal,\n\t\tutilities.overflow.hidden,\n\t\tshadows.depth.low,\n\t),\n\tviewport: cn(measurements.width.minimum, \"max-h-[15rem]\"),\n\titem: cn(\n\t\tshape.rounded,\n\t\talignment.start,\n\t\tpadding.small,\n\t\ttypography.size.small,\n\t\tinteractivity.states.clickable,\n\t\tinteractivity.dataStates.selected,\n\t\tinteractivity.states.hover,\n\t\tmeasurements.width.full,\n\t\t\"pl-lg relative\",\n\t),\n\tscrollButton: cn(utilities.cursor.default, alignment.center),\n\tlabel: cn(\n\t\tpaddingY.small,\n\t\tpaddingX.medium,\n\t\ttypography.size.small,\n\t\ttypography.weight.semibold,\n\t),\n\ticon: \"size-md\",\n\tseparator: \"h-px bg-outline-variant\",\n};\n\nconst Select = SelectPrimitive.Root;\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n\tReact.ElementRef<typeof SelectPrimitive.Trigger>,\n\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n\t<SelectPrimitive.Trigger\n\t\tref={ref}\n\t\tclassName={cn(selectStyles.trigger, className)}\n\t\t{...props}\n\t>\n\t\t{children}\n\t\t<SelectPrimitive.Icon asChild>\n\t\t\t<IconChevronDown className={selectStyles.icon} />\n\t\t</SelectPrimitive.Icon>\n\t</SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n\tReact.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n\t<SelectPrimitive.ScrollUpButton\n\t\tref={ref}\n\t\tclassName={cn(selectStyles.scrollButton, className)}\n\t\t{...props}\n\t>\n\t\t<IconChevronUp className={selectStyles.icon} />\n\t</SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n\tReact.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n\t<SelectPrimitive.ScrollDownButton\n\t\tref={ref}\n\t\tclassName={cn(selectStyles.scrollButton, className)}\n\t\t{...props}\n\t>\n\t\t<IconChevronDown className={selectStyles.icon} />\n\t</SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n\tSelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n\tReact.ElementRef<typeof SelectPrimitive.Content>,\n\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n\t<SelectPrimitive.Portal>\n\t\t<SelectPrimitive.Content\n\t\t\tref={ref}\n\t\t\tclassName={cn(selectStyles.content, className)}\n\t\t\tposition={position}\n\t\t\t{...props}\n\t\t>\n\t\t\t<SelectScrollUpButton />\n\t\t\t<SelectPrimitive.Viewport className={selectStyles.viewport}>\n\t\t\t\t{children}\n\t\t\t</SelectPrimitive.Viewport>\n\t\t\t<SelectScrollDownButton />\n\t\t</SelectPrimitive.Content>\n\t</SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n\tReact.ElementRef<typeof SelectPrimitive.Label>,\n\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n\t<SelectPrimitive.Label\n\t\tref={ref}\n\t\tclassName={cn(selectStyles.label, className)}\n\t\t{...props}\n\t/>\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n\tReact.ElementRef<typeof SelectPrimitive.Item>,\n\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n\t<SelectPrimitive.Item\n\t\tref={ref}\n\t\tclassName={cn(selectStyles.item, className)}\n\t\t{...props}\n\t>\n\t\t<SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n\t\t<SelectPrimitive.ItemIndicator>\n\t\t\t<IconCheck className={selectStyles.icon} />\n\t\t</SelectPrimitive.ItemIndicator>\n\t</SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n\tReact.ElementRef<typeof SelectPrimitive.Separator>,\n\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n\t<SelectPrimitive.Separator\n\t\tref={ref}\n\t\tclassName={cn(selectStyles.separator, className)}\n\t\t{...props}\n\t/>\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem,\n\tSelectLabel,\n\tSelectScrollDownButton,\n\tSelectScrollUpButton,\n\tSelectSeparator,\n\tSelectTrigger,\n\tSelectValue,\n};\n"
    }
  ]
}