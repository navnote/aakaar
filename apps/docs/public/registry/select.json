{
  "name": "select",
  "dependencies": [
    "@radix-ui/react-select",
    "@tabler/icons-react"
  ],
  "files": [
    {
      "name": "select.tsx",
      "content": "import * as SelectPrimitive from '@radix-ui/react-select';\nimport { IconCheck, IconChevronDown, IconChevronUp } from '@tabler/icons-react';\nimport * as React from 'react';\nimport {\n  alignment,\n  cn,\n  colors,\n  dimensions,\n  interactivity,\n  measurements,\n  padding,\n  paddingX,\n  paddingY,\n  positioning,\n  shadows,\n  shape,\n  typography,\n  utilities,\n} from '../../core/core';\n\nconst selectStyles = {\n  trigger: cn(\n    shape.roundedWithBorder,\n    dimensions.fullWidth,\n    colors.surface,\n    alignment.spaceBetween,\n    padding.small,\n    typography.size.small,\n    interactivity.states.clickable,\n    interactivity.states.disabled,\n    'h-xl [&>span]:line-clamp-1',\n  ),\n  content: cn(\n    shape.roundedWithBorder,\n    colors.surface,\n    positioning.relative,\n    utilities.zIndex.modal,\n    utilities.overflow.hidden,\n    shadows.depth.low,\n  ),\n  viewport: cn(measurements.width.minimum, 'max-h-[15rem]'),\n  item: cn(\n    shape.rounded,\n    alignment.start,\n    padding.small,\n    typography.size.small,\n    interactivity.states.clickable,\n    interactivity.dataStates.selected,\n    interactivity.states.hover,\n    measurements.width.full,\n    'pl-lg relative',\n  ),\n  scrollButton: cn(utilities.cursor.default, alignment.center),\n  label: cn(\n    paddingY.small,\n    paddingX.medium,\n    typography.size.small,\n    typography.weight.semibold,\n  ),\n  icon: 'size-md',\n  separator: 'h-px bg-outline-variant',\n};\n\nconst Select = SelectPrimitive.Root;\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(selectStyles.trigger, className)}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <IconChevronDown className={selectStyles.icon} />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(selectStyles.scrollButton, className)}\n    {...props}\n  >\n    <IconChevronUp className={selectStyles.icon} />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(selectStyles.scrollButton, className)}\n    {...props}\n  >\n    <IconChevronDown className={selectStyles.icon} />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = 'popper', ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(selectStyles.content, className)}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport className={selectStyles.viewport}>\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(selectStyles.label, className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(selectStyles.item, className)}\n    {...props}\n  >\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    <SelectPrimitive.ItemIndicator>\n      <IconCheck className={selectStyles.icon} />\n    </SelectPrimitive.ItemIndicator>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(selectStyles.separator, className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n"
    }
  ]
}