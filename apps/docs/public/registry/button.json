{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "import { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { clsx } from 'clsx';\nimport * as React from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport {\n  alignment,\n  borders,\n  cn,\n  colors,\n  flexBox,\n  interactivity,\n  shadows,\n  shape,\n  spacing,\n  typography,\n} from '../../core/core';\n\nconst buttonStyles = {\n  base: cn(\n    shape.rounded,\n    colors.surface,\n    alignment.center,\n    flexBox.inlineCenter,\n    spacing.small,\n    typography.noWrap,\n    shadows.focusRing.primary,\n    interactivity.states.clickable,\n    interactivity.states.hover,\n    interactivity.states.disabled,\n    interactivity.transitions.opacity,\n  ),\n};\n\nconst buttonVariants = cva(`${buttonStyles.base}`, {\n  variants: {\n    variant: {\n      ...colors.accent,\n      outline: `${colors.accent.justPrimary} ${borders.variant}`,\n      link: `${colors.accent.justPrimary} hover:underline shadow-none`,\n      ghost: `${colors.accent.justPrimary} shadow-none`,\n    },\n    size: {\n      sm: `h-sm py-sm px-md text-sm`,\n      md: `h-md py-md px-md text-md`,\n      lg: `h-lg py-lg px-md text-lg`,\n      icon: `p-xs`,\n    },\n  },\n  defaultVariants: {\n    variant: 'primary',\n    size: 'md',\n  },\n});\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={twMerge(clsx(buttonVariants({ variant, size, className })))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = 'Button';\n\nexport { Button };\n"
    }
  ]
}