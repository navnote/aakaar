{
  "name": "button",
  "dependencies": [
    "@base-ui-components/react"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "import { mergeProps } from \"@base-ui-components/react\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport { clsx } from \"clsx\";\nimport * as React from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport {\n\talignment,\n\tborders,\n\tcn,\n\tcolors,\n\tflexBox,\n\tinteractivity,\n\tshadows,\n\tshape,\n\tspacing,\n\ttypography,\n} from \"../../core/core\";\n\nconst buttonStyles = {\n\tbase: cn(\n\t\tshape.rounded,\n\t\tcolors.surface,\n\t\talignment.center,\n\t\tflexBox.inlineCenter,\n\t\tspacing.small,\n\t\ttypography.noWrap,\n\t\tshadows.focusRing.primary,\n\t\tinteractivity.states.clickable,\n\t\tinteractivity.states.hover,\n\t\tinteractivity.states.disabled,\n\t\tinteractivity.transitions.opacity,\n\t),\n};\n\nconst buttonVariants = cva(`${buttonStyles.base}`, {\n\tvariants: {\n\t\tvariant: {\n\t\t\t...colors.accent,\n\t\t\toutline: `${colors.accent.justPrimary} ${borders.variant}`,\n\t\t\tlink: `${colors.accent.justPrimary} hover:underline shadow-none`,\n\t\t\tghost: `${colors.accent.justPrimary} shadow-none`,\n\t\t},\n\t\tsize: {\n\t\t\tsm: \"h-sm py-sm px-md text-sm\",\n\t\t\tmd: \"h-md py-md px-md text-md\",\n\t\t\tlg: \"h-lg py-lg px-md text-lg\",\n\t\t\ticon: \"p-xs\",\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tvariant: \"primary\",\n\t\tsize: \"md\",\n\t},\n});\n\nexport interface ButtonProps\n\textends React.ButtonHTMLAttributes<HTMLButtonElement>,\n\t\tVariantProps<typeof buttonVariants> {\n\tasChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, variant, size, asChild = false, ...props }, ref) => {\n\t\tconst Comp = asChild ? \"span\" : \"button\";\n\t\tconst mergedProps = asChild\n\t\t\t? mergeProps(props, { role: \"button\", tabIndex: 0 })\n\t\t\t: props;\n\n\t\treturn (\n\t\t\t<Comp\n\t\t\t\tclassName={twMerge(clsx(buttonVariants({ variant, size, className })))}\n\t\t\t\tref={ref}\n\t\t\t\t{...mergedProps}\n\t\t\t/>\n\t\t);\n\t},\n);\nButton.displayName = \"Button\";\n\nexport { Button };\n"
    }
  ]
}