{
  "name": "toast",
  "dependencies": [
    "@base-ui-components/react"
  ],
  "files": [
    {
      "name": "toast.tsx",
      "content": "import { Toast as BaseToast } from \"@base-ui-components/react\";\nimport * as React from \"react\";\nimport {\n    cn,\n    colors,\n    flexBox,\n    padding,\n    positioning,\n    shadows,\n    shape,\n    typography,\n} from \"../../core/core\";\n\nconst toastStyles = {\n    root: cn(\n        shape.roundedWithBorder,\n        colors.surface,\n        flexBox.column,\n        padding.medium,\n        shadows.depth.medium,\n        positioning.relative,\n        \"min-w-[300px] max-w-[500px]\",\n    ),\n    title: cn(typography.weight.semibold, typography.size.small),\n    description: cn(typography.size.small, colors.surface),\n    close: cn(\n        positioning.absolute,\n        positioning.corners.topRight,\n        padding.small,\n        \"opacity-70 hover:opacity-100\",\n    ),\n    action: cn(padding.small, typography.size.small),\n};\n\nconst ToastProvider = BaseToast.Provider;\n\nconst ToastViewport = React.forwardRef<\n    HTMLDivElement,\n    React.ComponentPropsWithoutRef<typeof BaseToast.Viewport>\n>(({ className, ...props }, ref) => (\n    <BaseToast.Viewport\n        ref={ref}\n        className={cn(\n            positioning.fixed,\n            \"bottom-0 right-0 z-[100] flex max-h-screen w-full flex-col gap-2 p-4 sm:max-w-md\",\n            className,\n        )}\n        {...props}\n    />\n));\nToastViewport.displayName = \"ToastViewport\";\n\nconst ToastPortal = BaseToast.Portal;\n\nconst Toast = React.forwardRef<\n    HTMLDivElement,\n    React.ComponentPropsWithoutRef<typeof BaseToast.Root>\n>(({ className, ...props }, ref) => (\n    <BaseToast.Root\n        ref={ref}\n        className={cn(toastStyles.root, className)}\n        {...props}\n    />\n));\nToast.displayName = \"Toast\";\n\nconst ToastTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.ComponentPropsWithoutRef<typeof BaseToast.Title>\n>(({ className, ...props }, ref) => (\n    <BaseToast.Title\n        ref={ref}\n        className={cn(toastStyles.title, className)}\n        {...props}\n    />\n));\nToastTitle.displayName = \"ToastTitle\";\n\nconst ToastDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.ComponentPropsWithoutRef<typeof BaseToast.Description>\n>(({ className, ...props }, ref) => (\n    <BaseToast.Description\n        ref={ref}\n        className={cn(toastStyles.description, className)}\n        {...props}\n    />\n));\nToastDescription.displayName = \"ToastDescription\";\n\nconst ToastClose = React.forwardRef<\n    HTMLButtonElement,\n    React.ComponentPropsWithoutRef<typeof BaseToast.Close>\n>(({ className, ...props }, ref) => (\n    <BaseToast.Close\n        ref={ref}\n        className={cn(toastStyles.close, className)}\n        {...props}\n    />\n));\nToastClose.displayName = \"ToastClose\";\n\nconst ToastAction = React.forwardRef<\n    HTMLButtonElement,\n    React.ComponentPropsWithoutRef<typeof BaseToast.Action>\n>(({ className, ...props }, ref) => (\n    <BaseToast.Action\n        ref={ref}\n        className={cn(toastStyles.action, className)}\n        {...props}\n    />\n));\nToastAction.displayName = \"ToastAction\";\n\nexport { Toast, ToastAction, ToastClose, ToastDescription, ToastPortal, ToastProvider, ToastTitle, ToastViewport };\n"
    }
  ]
}