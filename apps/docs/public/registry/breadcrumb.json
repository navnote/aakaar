{
  "name": "breadcrumb",
  "dependencies": [
    "@radix-ui/react-slot",
    "@tabler/icons-react"
  ],
  "files": [
    {
      "name": "breadcrumb.tsx",
      "content": "import { Slot } from '@radix-ui/react-slot';\nimport { IconChevronRight, IconDots } from '@tabler/icons-react';\nimport * as React from 'react';\nimport {\n  alignment,\n  cn,\n  flexBox,\n  interactivity,\n  typography,\n} from '../../core/core';\n\nconst breadcrumbStyles = {\n  nav: '',\n  list: cn(\n    flexBox.row,\n    alignment.center,\n    typography.size.small,\n    'flex-wrap gap-xs break-words text-on-background sm:gap-md list-none',\n  ),\n  item: cn(flexBox.inlineCenter, 'gap-xs'),\n  link: cn(interactivity.transitions.colors, 'hover:text-primary'),\n  page: cn(typography.weight.regular, 'text-primary'),\n  separator: '[&>svg]:size-md',\n  ellipsis: cn(alignment.center, 'size-md'),\n};\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.HTMLAttributes<HTMLElement>\n>(({ ...props }, ref) => (\n  <nav\n    ref={ref}\n    aria-label=\"breadcrumb\"\n    className={breadcrumbStyles.nav}\n    {...props}\n  />\n));\nBreadcrumb.displayName = 'Breadcrumb';\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.OlHTMLAttributes<HTMLOListElement>\n>(({ className, ...props }, ref) => (\n  <ol ref={ref} className={cn(breadcrumbStyles.list, className)} {...props} />\n));\nBreadcrumbList.displayName = 'BreadcrumbList';\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.LiHTMLAttributes<HTMLLIElement>\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(breadcrumbStyles.item, className)} {...props} />\n));\nBreadcrumbItem.displayName = 'BreadcrumbItem';\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<'a'> & {\n    asChild?: boolean;\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'a';\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(breadcrumbStyles.link, className)}\n      {...props}\n    />\n  );\n});\nBreadcrumbLink.displayName = 'BreadcrumbLink';\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-current=\"page\"\n    className={cn(breadcrumbStyles.page, className)}\n    {...props}\n  />\n));\nBreadcrumbPage.displayName = 'BreadcrumbPage';\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'li'>) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(breadcrumbStyles.separator, className)}\n    {...props}\n  >\n    {children ?? <IconChevronRight />}\n  </li>\n);\nBreadcrumbSeparator.displayName = 'BreadcrumbSeparator';\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(breadcrumbStyles.ellipsis, className)}\n    {...props}\n  >\n    <IconDots className=\"size-md\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n);\nBreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';\n\nexport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n};\n"
    }
  ]
}