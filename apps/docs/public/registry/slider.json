{
  "name": "slider",
  "dependencies": [
    "@base-ui-components/react"
  ],
  "files": [
    {
      "name": "slider.tsx",
      "content": "import { Slider as BaseSlider } from \"@base-ui-components/react\";\nimport * as React from \"react\";\nimport {\n\tborders,\n\tcn,\n\tcolors,\n\tinteractivity,\n\tmeasurements,\n\tpadding,\n\tpositioning,\n\tshadows,\n\tshape,\n} from \"../../core/core\";\n\nconst sliderStyles = {\n\troot: cn(positioning.relative, \"w-full\"),\n\tcontrol: cn(\n\t\tpositioning.relative,\n\t\t\"w-full touch-none select-none\",\n\t\tpadding.large,\n\t),\n\ttrack: cn(\n\t\tpositioning.relative,\n\t\tmeasurements.width.minimum,\n\t\tshape.rounded,\n\t\tcolors.containers.secondary,\n\t\tshape.circlePrimary,\n\t),\n\trange: cn(positioning.absolute, \"h-full rounded\", colors.surface),\n\tthumb: cn(\n\t\t\"block\",\n\t\tshape.circle,\n\t\t\"size-md\",\n\t\tcolors.surface,\n\t\tborders.variant,\n\t\t\"select-none cursor-pointer\",\n\t\tshadows.depth.medium,\n\t\tinteractivity.states.disabled,\n\t\t\"focus-visible:outline-2 focus-visible:outline-primary\",\n\t),\n};\n\nconst Slider = React.forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentPropsWithoutRef<typeof BaseSlider.Root>\n>(({ className, ...props }, ref) => (\n\t<BaseSlider.Root\n\t\tref={ref as never}\n\t\tclassName={cn(sliderStyles.root, className)}\n\t\t{...props}\n\t/>\n));\nSlider.displayName = \"Slider\";\n\nconst SliderTrack = React.forwardRef<\n\tReact.ElementRef<typeof BaseSlider.Track>,\n\tReact.ComponentPropsWithoutRef<typeof BaseSlider.Track>\n>(({ className, ...props }, ref) => (\n\t<BaseSlider.Track\n\t\tref={ref as never}\n\t\tclassName={cn(sliderStyles.track, className)}\n\t\t{...props}\n\t/>\n));\nSliderTrack.displayName = \"SliderTrack\";\n\nconst SliderValue = React.forwardRef<\n\tHTMLOutputElement,\n\tReact.ComponentPropsWithoutRef<typeof BaseSlider.Value>\n>(({ className, ...props }, ref) => (\n\t<BaseSlider.Value ref={ref} className={className} {...props} />\n));\nSliderValue.displayName = \"SliderValue\";\n\nconst SliderRange = React.forwardRef<\n\tHTMLDivElement,\n\tReact.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n\t<BaseSlider.Indicator\n\t\tref={ref as never}\n\t\tclassName={cn(sliderStyles.range, className)}\n\t\t{...props}\n\t/>\n));\nSliderRange.displayName = \"SliderRange\";\n\nconst SliderThumb = React.forwardRef<\n\tReact.ElementRef<typeof BaseSlider.Thumb>,\n\tReact.ComponentPropsWithoutRef<typeof BaseSlider.Thumb>\n>(({ className, ...props }, ref) => (\n\t<BaseSlider.Thumb\n\t\tref={ref}\n\t\tclassName={cn(sliderStyles.thumb, className)}\n\t\t{...props}\n\t/>\n));\nSliderThumb.displayName = \"SliderThumb\";\n\nconst SliderControl = React.forwardRef<\n\tReact.ElementRef<typeof BaseSlider.Control>,\n\tReact.ComponentPropsWithoutRef<typeof BaseSlider.Control>\n>(({ className, ...props }, ref) => (\n\t<BaseSlider.Control\n\t\tref={ref}\n\t\tclassName={cn(sliderStyles.control, className)}\n\t\t{...props}\n\t/>\n));\nSliderControl.displayName = \"SliderControl\";\n\nexport {\n\tSlider,\n\tSliderControl,\n\tSliderRange,\n\tSliderThumb,\n\tSliderTrack,\n\tSliderValue,\n};\n"
    }
  ]
}