{
  "name": "dialog",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "name": "dialog.tsx",
      "content": "import * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { IconX } from \"@tabler/icons-react\";\nimport * as React from \"react\";\n\nimport {\n\talignment,\n\tcn,\n\tcolors,\n\tdimensions,\n\tflexBox,\n\tinteractivity,\n\tpadding,\n\tpositioning,\n\tshadows,\n\tshape,\n\tspacing,\n\ttransforms,\n\ttypography,\n\tutilities,\n} from \"../../core/core\";\n\nconst dialogStyles = {\n\toverlay: cn(\n\t\tcolors.overlay,\n\t\talignment.center,\n\t\tpositioning.fixed,\n\t\tpositioning.inset.full,\n\t\tutilities.zIndex.modal,\n\t\tinteractivity.transitions.opacity,\n\t),\n\tcontent: cn(\n\t\tshape.roundedWithBorder,\n\t\tcolors.surface,\n\t\tflexBox.column,\n\t\tspacing.medium,\n\t\tpadding.medium,\n\t\tshadows.depth.medium,\n\t\tpositioning.fixed,\n\t\tpositioning.inset.center,\n\t\ttransforms.center,\n\t\tutilities.zIndex.modal,\n\t\tinteractivity.transitions.all,\n\t),\n\tclose: cn(\n\t\tpositioning.absolute,\n\t\tpositioning.corners.topRight,\n\t\tshape.roundedWithBorder,\n\t\tinteractivity.transitions.opacity,\n\t\tinteractivity.states.clickable,\n\t\tinteractivity.states.disabled,\n\t\tinteractivity.dataStates.open,\n\t\tinteractivity.dataStates.checked,\n\t\tinteractivity.dataStates.selected,\n\t),\n\theader: cn(flexBox.column, \"space-y-md text-center sm:text-left\"),\n\tfooter: \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-xs\",\n\ttitle: cn(typography.weight.semibold, \"text-lg leading-none tracking-tight\"),\n\tdescription: cn(typography.size.small, \"text-on-surface\"),\n\tcloseIcon: cn(dimensions.medium),\n};\n\nconst Dialog: typeof DialogPrimitive.Root = DialogPrimitive.Root;\n\nconst DialogTrigger: typeof DialogPrimitive.Trigger = DialogPrimitive.Trigger;\n\nconst DialogPortal: typeof DialogPrimitive.Portal = DialogPrimitive.Portal;\n\nconst DialogClose: typeof DialogPrimitive.Close = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n\tReact.ElementRef<typeof DialogPrimitive.Overlay>,\n\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n\t<DialogPrimitive.Overlay\n\t\tref={ref}\n\t\tclassName={cn(dialogStyles.overlay, className)}\n\t\t{...props}\n\t/>\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n\tReact.ElementRef<typeof DialogPrimitive.Content>,\n\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n\t<DialogPortal>\n\t\t<DialogOverlay />\n\t\t<DialogPrimitive.Content\n\t\t\tref={ref}\n\t\t\tclassName={cn(dialogStyles.content, className)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t\t<DialogPrimitive.Close className={dialogStyles.close}>\n\t\t\t\t<IconX className={dialogStyles.closeIcon} />\n\t\t\t\t<span className=\"sr-only\">Close</span>\n\t\t\t</DialogPrimitive.Close>\n\t\t</DialogPrimitive.Content>\n\t</DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n\tclassName,\n\t...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n\t<div className={cn(dialogStyles.header, className)} {...props} />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({\n\tclassName,\n\t...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n\t<div className={cn(dialogStyles.footer, className)} {...props} />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n\tReact.ElementRef<typeof DialogPrimitive.Title>,\n\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n\t<DialogPrimitive.Title\n\t\tref={ref}\n\t\tclassName={cn(dialogStyles.title, className)}\n\t\t{...props}\n\t/>\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n\tReact.ElementRef<typeof DialogPrimitive.Description>,\n\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n\t<DialogPrimitive.Description\n\t\tref={ref}\n\t\tclassName={cn(dialogStyles.description, className)}\n\t\t{...props}\n\t/>\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n\tDialog,\n\tDialogClose,\n\tDialogContent,\n\tDialogDescription,\n\tDialogFooter,\n\tDialogHeader,\n\tDialogOverlay,\n\tDialogPortal,\n\tDialogTitle,\n\tDialogTrigger,\n};\n"
    }
  ]
}