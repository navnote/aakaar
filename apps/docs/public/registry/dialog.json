{
  "name": "dialog",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "name": "dialog.tsx",
      "content": "import * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { IconX } from '@tabler/icons-react';\nimport * as React from 'react';\n\nimport {\n  alignment,\n  shadows,\n  padding,\n  flexBox,\n  utilities,\n  positioning,\n  cn,\n  colors,\n  interactivity,\n  shape,\n  spacing,\n  transforms,\n  typography,\n  dimensions,\n} from '../../core/core';\n\nconst dialogStyles = {\n  overlay: cn(\n    colors.overlay,\n    alignment.center,\n    positioning.fixed,\n    positioning.inset.full,\n    utilities.zIndex.modal,\n    interactivity.transitions.opacity,\n  ),\n  content: cn(\n    shape.roundedWithBorder,\n    colors.surface,\n    flexBox.column,\n    spacing.medium,\n    padding.medium,\n    shadows.depth.medium,\n    positioning.fixed,\n    positioning.inset.center,\n    transforms.center,\n    utilities.zIndex.modal,\n    interactivity.transitions.all,\n  ),\n  close: cn(\n    positioning.absolute,\n    positioning.corners.topRight,\n    shape.roundedWithBorder,\n    interactivity.transitions.opacity,\n    interactivity.states.clickable,\n    interactivity.states.disabled,\n    interactivity.dataStates.open,\n    interactivity.dataStates.checked,\n    interactivity.dataStates.selected,\n  ),\n  header: cn(flexBox.column, 'space-y-md text-center sm:text-left'),\n  footer: 'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-xs',\n  title: cn(typography.weight.semibold, 'text-lg leading-none tracking-tight'),\n  description: cn(typography.size.small, 'text-on-surface'),\n  closeIcon: cn(dimensions.medium),\n};\n\nconst Dialog: typeof DialogPrimitive.Root = DialogPrimitive.Root;\n\nconst DialogTrigger: typeof DialogPrimitive.Trigger = DialogPrimitive.Trigger;\n\nconst DialogPortal: typeof DialogPrimitive.Portal = DialogPrimitive.Portal;\n\nconst DialogClose: typeof DialogPrimitive.Close = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(dialogStyles.overlay, className)}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(dialogStyles.content, className)}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className={dialogStyles.close}>\n        <IconX className={dialogStyles.closeIcon} />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(dialogStyles.header, className)} {...props} />\n);\nDialogHeader.displayName = 'DialogHeader';\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(dialogStyles.footer, className)} {...props} />\n);\nDialogFooter.displayName = 'DialogFooter';\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(dialogStyles.title, className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(dialogStyles.description, className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n"
    }
  ]
}